/*Generado por Disrupsoft*/
package com.planning.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.planning.entity.Management;
import com.planning.service.ManagementService;
import com.planning.util.ArregloCreator;
import com.planning.util.JsonId;
import com.planning.exception.OracleException;
import com.planning.util.RestModelAndView;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import org.hibernate.exception.SQLGrammarException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.orm.jpa.JpaSystemException;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.persistence.PersistenceException;
import java.util.ArrayList;
import java.util.List;

/**
 * Controller object for domain model class Management.
 *
 * @see Management
 */
@RestController(value = "Planning.ManagementController")
@RequestMapping("/gerencia")
@Api(description = "Exposes APIs to work with Management resource.", value = "ManagementController")
public class ManagementController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ManagementController.class);

    @Autowired
    private ManagementService managementService;

    @RequestMapping(value = "/listarTodas", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Management instances.")
    public ModelAndView getManagements(ModelMap map) {
        LOGGER.debug("Rendering Managements list");
        map.put("gerencias", managementService.findAll(new Sort(Sort.Direction.ASC, "order", "id")));
        map.put("success", true);
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/cargarDatos", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Management instances.")
    public ModelAndView cargarDatos(@RequestParam("gerencia_id") Integer id, ModelMap map) {
        LOGGER.debug("Rendering Managements list");
        map.put("gerencia", managementService.findOne(id));
        map.put("success", true);
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/listarGerencia", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Management instances.")
    public ModelAndView gerencias() {
        Pageable pageable = new PageRequest(0, Integer.MAX_VALUE, new Sort(Sort.Direction.ASC, "order", "id"));
        return new RestModelAndView(gerencias(managementService.findAll(pageable)));
    }

    @RequestMapping(value = "/salvarGerencia", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the Management instance associated with the given id.")
    public ModelAndView salvarGerencia(@RequestBody Management management, ModelMap map) {
        management.setActive(true);
        Management instance = managementService.saveAndFlush(management);
        LOGGER.debug("Management details with id: {}", instance);
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/eliminarGerencia", method = RequestMethod.POST)
    @ApiOperation(value = "Deletes the Management instance associated with the given id.")
    public ModelAndView eliminarGerencia(@RequestParam("gerencia_id") Integer id, ModelMap map) {
        LOGGER.debug("Deleting Management with id: {}", id);
        managementService.delete(id);
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/eliminarGerencias", method = RequestMethod.POST)
    @ApiOperation(value = "Deletes the Management instance associated with the given id.")
    public ModelAndView eliminarGerencias(@RequestBody JsonId ids, ModelMap map) {
        ArrayList<Integer> integers = ids.getIds();
        for (Integer id : integers) {
            managementService.delete(id);
        }
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Management instances.")
    public Long countAllManagements() {
        LOGGER.debug("counting Managements");
        Long count = managementService.count();
        return count;
    }

    private ModelMap gerencias(Page<Management> page) {
        ModelMap map = new ModelMap();
        map.put("sEcho", "1");
        map.put("iTotalRecords", page.getTotalElements());
        map.put("iTotalDisplayRecords", page.getNumberOfElements());
        List<Management> content = page.getContent();
        ModelMap[] tasks = new ModelMap[content.size()];
        int cont = content.size();
        for (int i = 0; i < cont; i++) {
            tasks[i] = ArregloCreator.crearGerenciaMap(content.get(i));
        }
        map.put("aaData", tasks);
        return map;
    }

    @ExceptionHandler(Exception.class)
    public ModelAndView tratarExcepcion(Exception e) {
        LOGGER.warn(e.getLocalizedMessage(), e);
        ModelMap modelMap = new ModelMap();
        if (e instanceof JpaSystemException) {
            JpaSystemException jse = (JpaSystemException) e;
            modelMap.put("error", tratarMensaje(jse.getMostSpecificCause()));
        } else if (e instanceof PersistenceException) {
            JpaSystemException exception = new JpaSystemException((PersistenceException) e);
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof DataIntegrityViolationException) {
            DataIntegrityViolationException exception = (DataIntegrityViolationException) e;
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof SQLGrammarException) {
            SQLGrammarException exception = (SQLGrammarException) e;
            modelMap.put("error", tratarMensaje(exception.getCause()));
        } else {
            OracleException oe = new OracleException(e);
            modelMap.put("error", oe.getMessage());
        }
        modelMap.put("success", false);
        return new RestModelAndView(modelMap);
    }

    private String tratarMensaje(Throwable e) {
        String message = e.getMessage();
        if (e.getMessage().contains("unq_facultad_0")) {
            return "Ya existen estas siglas.";
        } else if (e.getMessage().contains("FK_AREA_MANAGEMENT")) {
            return "No se puede eliminar esta dirección porque contiene gerencias.";
        } else if (e.getMessage().contains("CODIGO_UNICO")) {
            return "No se puede guardar esta dirección porque ya existe otra con ese orden.";
        } else if (e.getMessage().contains("SYS_C009985")) {
            return "No se puede insertar la dirección porque la la secuencia no está correctamente configurada.";
        } else if (e.getMessage().contains("MANAGEMENT_ID_NULL")) {
            return "El identificador de direcciones no debe ser vacío.";
        } else if (e.getMessage().contains("MANAGEMENT_NOMBRE_NULL")) {
            return "El nombre de direcciones no debe ser vacío.";
        } else if (e.getMessage().contains("FK_MANAGEMENT_MANAGEMENT")) {
            return "No se puede eliminar esta dirección porque esta referenciada en otra dirección.";
        } else if (e.getMessage().contains("fk_departamento_id_facultad")) {
            return "No se puede eliminar esta facultad porque contiene departamentos.";
        }
        OracleException oe = new OracleException(message);
        return oe.getMensaje();
    }

}
