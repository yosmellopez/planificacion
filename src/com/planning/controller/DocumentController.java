/*Generado por Disrupsoft*/
package com.planning.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.planning.entity.Document;
import com.planning.service.DocumentService;
import com.planning.util.OracleException;
import com.planning.util.RestModelAndView;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import org.hibernate.exception.SQLGrammarException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.orm.jpa.JpaSystemException;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.persistence.PersistenceException;

/**
 * Controller object for domain model class Document.
 *
 * @see Document
 */
@RestController(value = "Planning.DocumentController")
@RequestMapping("/planning/Document")
@Api(description = "Exposes APIs to work with Document resource.", value = "DocumentController")
public class DocumentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DocumentController.class);

    @Autowired
    private DocumentService documentService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Document instances matching the search criteria.")
    public Page<Document> findDocuments(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Documents list");
        return documentService.findAll(pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Document instances.")
    public Page<Document> getDocuments(Pageable pageable) {
        LOGGER.debug("Rendering Documents list");
        return documentService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Document instance associated with the given id.")
    public Document getDocument(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Document with id: {}", id);
        Document instance = documentService.findOne(id);
        LOGGER.debug("Document details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Document instance associated with the given id.")
    public boolean deleteDocument(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Document with id: {}", id);
        documentService.delete(id);
        return true;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Document instance associated with the given id.")
    public Document editDocument(@PathVariable("id") Integer id, @RequestBody Document instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Document with id: {}", instance.getId());
        instance.setId(id);
        instance = documentService.saveAndFlush(instance);
        LOGGER.debug("Document details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Document instance.")
    public Document createDocument(@RequestBody Document instance) {
        LOGGER.debug("Create Document with information: {}", instance);
        instance = documentService.saveAndFlush(instance);
        LOGGER.debug("Created Document with information: {}", instance);
        return instance;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service
     */
    protected void setDocumentService(DocumentService service) {
        this.documentService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Document instances.")
    public Long countAllDocuments() {
        LOGGER.debug("counting Documents");
        Long count = documentService.count();
        return count;
    }

    @ExceptionHandler(Exception.class)
    public ModelAndView tratarExcepcion(Exception e) {
        LOGGER.warn(e.getLocalizedMessage(), e);
        ModelMap modelMap = new ModelMap();
        if (e instanceof JpaSystemException) {
            JpaSystemException jse = (JpaSystemException) e;
            modelMap.put("error", tratarMensaje(jse.getMostSpecificCause()));
        } else if (e instanceof PersistenceException) {
            JpaSystemException exception = new JpaSystemException((PersistenceException) e);
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof DataIntegrityViolationException) {
            DataIntegrityViolationException exception = (DataIntegrityViolationException) e;
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof SQLGrammarException) {
            SQLGrammarException exception = (SQLGrammarException) e;
            modelMap.put("error", tratarMensaje(exception.getCause()));
        } else {
            OracleException oe = new OracleException(e);
            modelMap.put("error", oe.getMessage());
        }
        modelMap.put("success", false);
        return new RestModelAndView(modelMap);
    }

    private String tratarMensaje(Throwable e) {
        String message = e.getMessage();
        if (e.getMessage().contains("unq_facultad_0")) {
            return "Ya existen estas siglas.";
        } else if (e.getMessage().contains("unq_facultad_1")) {
            return "Ya existe este nombre de facultad.";
        } else if (e.getMessage().contains("fk_departamento_id_facultad")) {
            return "No se puede eliminar esta facultad porque contiene departamentos.";
        }
        OracleException oe = new OracleException(message);
        return oe.getMensaje();
    }

}
