/*Generado por Disrupsoft*/
package com.planning.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.planning.service.AreaService;
import com.planning.service.PositionService;
import com.planning.util.OracleException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.beans.factory.annotation.Autowired;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wordnik.swagger.annotations.*;
import com.planning.entity.*;
import com.planning.service.*;
import com.planning.util.ArregloCreator;
import com.planning.util.JsonId;
import com.planning.util.RestModelAndView;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

import java.util.ArrayList;

import java.util.List;
import javax.persistence.PersistenceException;

import org.hibernate.exception.SQLGrammarException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.orm.jpa.JpaSystemException;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.ModelAndView;

/**
 * Controller object for domain model class Area.
 *
 * @see Area
 */
@RestController(value = "Planning.AreaController")
@RequestMapping("/area")
@Api(description = "Exposes APIs to work with Area resource.", value = "AreaController")
public class AreaController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AreaController.class);

    @Autowired
    private AreaService areaService;

    @Autowired
    private PositionService positionService;

    @Autowired
    private ManagementService managementService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Area instances matching the search criteria.")
    public Page<Area> findAreas(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Areas list");
        return areaService.findAll(pageable);
    }

    @RequestMapping(value = "/listarArea", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Area instances.")
    public ModelAndView getAreas(Pageable pageable) {
        LOGGER.debug("Rendering Areas list");
        return new RestModelAndView(areas(areaService.findAll(pageable)));
    }

    @RequestMapping(value = "/listarDeGerencia", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Area instances.")
    public ModelAndView getAreasGerencia(@RequestParam("gerencia_id") Integer id, ModelMap map) {
        LOGGER.debug("Rendering Areas list");
        map.put("success", true);
        map.put("areas", areaService.findByManagement(managementService.findOne(id)));
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/listarTodas", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Area instances.")
    public ModelAndView listarTodas(ModelMap map) {
        LOGGER.debug("Rendering Areas list");
        map.put("success", true);
        map.put("areas", areaService.findAll());
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/salvarArea", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Area instances.")
    public ModelAndView salvarArea(@RequestBody Area area, ModelMap map) {
        area.setCode(obtenerCodigo(area.getName()));
        LOGGER.debug("Rendering Areas list");
        areaService.saveAndFlush(area);
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }

    private String obtenerCodigo(String nombre) {
        String[] split = nombre.split("[ ]");
        nombre = "";
        for (String elem : split) {
            nombre += ("" + elem.charAt(0)).toUpperCase();
        }
        return nombre;
    }

    @RequestMapping(value = "/cargarDatos", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the Area instance associated with the given id.")
    public ModelAndView cargarDatos(@RequestParam("area_id") Integer id, ModelMap map) {
        Area area = areaService.findOne(id);
        map.put("success", true);
        map.put("area", ArregloCreator.cargarArea(area));
        LOGGER.debug("Area details with id: {}", area);
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/eliminarArea", method = RequestMethod.POST)
    @ApiOperation(value = "Deletes the Area instance associated with the given id.")
    public ModelAndView deleteArea(@RequestParam("area_id") Integer id, ModelMap map) {
        LOGGER.debug("Deleting Area with id: {}", id);
        areaService.delete(id);
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/eliminarAreas", method = RequestMethod.POST)
    @ApiOperation(value = "Deletes the Area instance associated with the given id.")
    public ModelAndView eliminarAreas(@RequestBody JsonId ids, ModelMap map) {
        ArrayList<Integer> integers = ids.getIds();
        for (Integer id : integers) {
            areaService.delete(id);
        }
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Area instance associated with the given id.")
    public Area editArea(@PathVariable("id") Integer id, @RequestBody Area instance) {
        LOGGER.debug("Editing Area with id: {}", instance.getId());
        instance.setId(id);
        instance = areaService.saveAndFlush(instance);
        LOGGER.debug("Area details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}/positions", method = RequestMethod.GET)
    @ApiOperation(value = "Gets the positions instance associated with the given id.")
    public Page<Position> findAssociatedpositions(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated positions");
        return positionService.findAll(pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Area instance.")
    public Area createArea(@RequestBody Area instance) {
        LOGGER.debug("Create Area with information: {}", instance);
        instance = areaService.saveAndFlush(instance);
        LOGGER.debug("Created Area with information: {}", instance);
        return instance;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service
     */
    protected void setAreaService(AreaService service) {
        this.areaService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Area instances.")
    public Long countAllAreas() {
        LOGGER.debug("counting Areas");
        Long count = areaService.count();
        return count;
    }

    private ModelMap areas(Page<Area> page) {
        ModelMap map = new ModelMap();
        map.put("sEcho", "1");
        map.put("iTotalRecords", page.getTotalElements());
        map.put("iTotalDisplayRecords", page.getNumberOfElements());
        List<Area> content = page.getContent();
        ModelMap[] tasks = new ModelMap[content.size()];
        int cont = content.size();
        for (int i = 0; i < cont; i++) {
            tasks[i] = ArregloCreator.crearAreaMap(content.get(i));
        }
        map.put("aaData", tasks);
        return map;
    }

    @ExceptionHandler(Exception.class)
    public ModelAndView tratarExcepcion(Exception e) {
        LOGGER.warn(e.getLocalizedMessage(), e);
        ModelMap modelMap = new ModelMap();
        if (e instanceof JpaSystemException) {
            JpaSystemException jse = (JpaSystemException) e;
            modelMap.put("error", tratarMensaje(jse.getMostSpecificCause()));
        } else if (e instanceof PersistenceException) {
            JpaSystemException exception = new JpaSystemException((PersistenceException) e);
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof DataIntegrityViolationException) {
            DataIntegrityViolationException exception = (DataIntegrityViolationException) e;
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof SQLGrammarException) {
            SQLGrammarException exception = (SQLGrammarException) e;
            modelMap.put("error", tratarMensaje(exception.getCause()));
        } else {
            OracleException oe = new OracleException(e);
            modelMap.put("error", oe.getMessage());
        }
        modelMap.put("success", false);
        return new RestModelAndView(modelMap);
    }

    private String tratarMensaje(Throwable e) {
        String message = e.getMessage();
        if (e.getMessage().contains("unq_facultad_0")) {
            return "Ya existen estas siglas.";
        } else if (e.getMessage().contains("unq_facultad_1")) {
            return "Ya existe este nombre de facultad.";
        } else if (e.getMessage().contains("FK_POSITION_AREA")) {
            return "No se puede eliminar esta dirección porque contiene cargos.";
        } else if (e.getMessage().contains("fk_departamento_id_facultad")) {
            return "No se puede eliminar esta facultad porque contiene departamentos.";
        }
        OracleException oe = new OracleException(message);
        return oe.getMensaje();
    }

}
