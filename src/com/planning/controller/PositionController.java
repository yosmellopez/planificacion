/*Generado por Disrupsoft*/
package com.planning.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.planning.entity.Position;
import com.planning.service.ManagementService;
import com.planning.service.PositionService;
import com.planning.util.ArregloCreator;
import com.planning.util.JsonId;
import com.planning.util.OracleException;
import com.planning.util.RestModelAndView;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import org.hibernate.exception.SQLGrammarException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.orm.jpa.JpaSystemException;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.persistence.PersistenceException;
import java.util.ArrayList;
import java.util.List;

/**
 * Controller object for domain model class Position.
 *
 * @see Position
 */
@RestController(value = "Planning.PositionController")
@RequestMapping("/cargo")
@Api(description = "Exposes APIs to work with Position resource.", value = "PositionController")
public class PositionController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(PositionController.class);
    
    @Autowired
    private PositionService positionService;
    
    @Autowired
    private ManagementService managementService;
    
    @RequestMapping(value = "/listarTodos", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Position instances matching the search criteria.")
    public ModelAndView listarTodos(Pageable pageable, ModelMap map) {
        LOGGER.debug("Rendering Positions list");
        map.put("cargos", positionService.findAll());
        return RestModelAndView.ok(map);
    }
    
    @RequestMapping(value = "/listarCargo", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Position instances.")
    public ModelAndView getPositions(Pageable pageable) {
        LOGGER.debug("Rendering Positions list");
        return new RestModelAndView(cargos(positionService.findAll(pageable)));
    }
    
    @RequestMapping(value = "/listarDeArea", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Position instances.")
    public ModelAndView listarArea(@RequestParam("area_id") Integer id, ModelMap map) {
        LOGGER.debug("Rendering Positions list");
        map.put("success", true);
        map.put("cargos", positionService.findByAreaId(id));
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/listarDeGerencia", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Position instances.")
    public ModelAndView listarCargoGerencia(@RequestParam("gerencia_id") Integer id, ModelMap map) {
        LOGGER.debug("Rendering Positions list");
        map.put("success", true);
        map.put("cargos", positionService.findByArea_Management(managementService.findOne(id)));
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/salvarCargo", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Position instances.")
    public ModelAndView salvarCargo(@RequestBody Position position, ModelMap map) {
        positionService.saveAndFlush(position);
        LOGGER.debug("Rendering Positions list");
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/cargarDatos", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the Position instance associated with the given id.")
    public ModelAndView cargarDatos(@RequestParam("cargo_id") Integer id, ModelMap map) {
        LOGGER.debug("Getting Position with id: {}", id);
        Position instance = positionService.findOne(id);
        LOGGER.debug("Position details with id: {}", instance);
        map.put("success", true);
        map.put("cargo", instance);
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/eliminarCargo", method = RequestMethod.POST)
    @ApiOperation(value = "Deletes the Position instance associated with the given id.")
    public ModelAndView deletePosition(@RequestParam("cargo_id") Integer id, ModelMap map) {
        LOGGER.debug("Deleting Position with id: {}", id);
        positionService.delete(id);
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/eliminarCargos", method = RequestMethod.POST)
    @ApiOperation(value = "Deletes the Position instance associated with the given id.")
    public ModelAndView eliminarCargos(@RequestBody JsonId ids, ModelMap map) {
        ArrayList<Integer> arrayList = ids.getIds();
        for (Integer id : arrayList) {
            positionService.delete(id);
        }
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Position instance associated with the given id.")
    public Position editPosition(@PathVariable("id") Integer id, @RequestBody Position instance) {
        LOGGER.debug("Editing Position with id: {}", instance.getId());
        instance.setId(id);
        instance = positionService.saveAndFlush(instance);
        LOGGER.debug("Position details with id: {}", instance);
        return instance;
    }
    
    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Position instance.")
    public Position createPosition(@RequestBody Position instance) {
        LOGGER.debug("Create Position with information: {}", instance);
        instance = positionService.saveAndFlush(instance);
        LOGGER.debug("Created Position with information: {}", instance);
        return instance;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service
     */
    protected void setPositionService(PositionService service) {
        this.positionService = service;
    }
    
    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Position instances.")
    public Long countAllPositions() {
        LOGGER.debug("counting Positions");
        Long count = positionService.count();
        return count;
    }
    
    private ModelMap cargos(Page<Position> page) {
        ModelMap map = new ModelMap();
        map.put("sEcho", "1");
        map.put("iTotalRecords", page.getTotalElements());
        map.put("iTotalDisplayRecords", page.getNumberOfElements());
        List<Position> content = page.getContent();
        ModelMap[] tasks = new ModelMap[content.size()];
        int cont = content.size();
        for (int i = 0; i < cont; i++) {
            tasks[i] = ArregloCreator.crearCargoMap(content.get(i));
        }
        map.put("aaData", tasks);
        return map;
    }
    
    @ExceptionHandler(Exception.class)
    public ModelAndView tratarExcepcion(Exception e) {
        LOGGER.warn(e.getLocalizedMessage(), e);
        ModelMap modelMap = new ModelMap();
        if (e instanceof JpaSystemException) {
            JpaSystemException jse = (JpaSystemException) e;
            modelMap.put("error", tratarMensaje(jse.getMostSpecificCause()));
        } else if (e instanceof PersistenceException) {
            JpaSystemException exception = new JpaSystemException((PersistenceException) e);
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof DataIntegrityViolationException) {
            DataIntegrityViolationException exception = (DataIntegrityViolationException) e;
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof SQLGrammarException) {
            SQLGrammarException exception = (SQLGrammarException) e;
            modelMap.put("error", tratarMensaje(exception.getCause()));
        } else {
            OracleException oe = new OracleException(e);
            modelMap.put("error", oe.getMessage());
        }
        modelMap.put("success", false);
        return new RestModelAndView(modelMap);
    }
    
    private String tratarMensaje(Throwable e) {
        String message = e.getMessage();
        if (e.getMessage().contains("unq_facultad_0")) {
            return "Ya existen estas siglas.";
        } else if (e.getMessage().contains("unq_facultad_1")) {
            return "Ya existe este nombre de facultad.";
        } else if (e.getMessage().contains("FK_PLTASK_POSITION")) {
            return "No se puede eliminar este cargo porque contiene tareas de planes.";
        } else if (e.getMessage().contains("FK_TASK_POSITION")) {
            return "No se puede eliminar este cargo porque contiene tareas.";
        } else if (e.getMessage().contains("FK_USER_POSITION")) {
            return "No se puede eliminar este cargo porque contiene usuarios.";
        } else if (e.getMessage().contains("fk_departamento_id_facultad")) {
            return "No se puede eliminar esta facultad porque contiene departamentos.";
        }
        OracleException oe = new OracleException(message);
        return oe.getMensaje();
    }
    
}
