/*Generado por Disrupsoft*/
package com.planning.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.planning.service.PlanService;
import com.planning.service.StatusPlanService;
import com.planning.util.OracleException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.beans.factory.annotation.Autowired;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wordnik.swagger.annotations.*;
import com.planning.entity.*;
import com.planning.util.ArregloCreator;
import com.planning.util.JsonId;
import com.planning.util.RestModelAndView;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

import java.util.ArrayList;
import java.util.List;
import javax.persistence.PersistenceException;

import org.hibernate.exception.SQLGrammarException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.orm.jpa.JpaSystemException;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

/**
 * Controller object for domain model class StatusPlan.
 *
 * @see StatusPlan
 */
@RestController(value = "Planning.StatusPlanController")
@RequestMapping("/estado-plan")
@Api(description = "Exposes APIs to work with StatusPlan resource.", value = "StatusPlanController")
public class StatusPlanController {

    private static final Logger LOGGER = LoggerFactory.getLogger(StatusPlanController.class);

    @Autowired
    private StatusPlanService statusPlanService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of StatusPlan instances matching the search criteria.")
    public Page<StatusPlan> findStatusPlans(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering StatusPlans list");
        return statusPlanService.findAll(pageable);
    }

    @RequestMapping(value = "/listarTodos", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of StatusPlan instances.")
    public ModelAndView getStatusPlans(ModelMap map) {
        LOGGER.debug("Rendering StatusPlans list");
        map.put("success", true);
        map.put("estados", statusPlanService.findAll());
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/listarEstado", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of StatusPlan instances.")
    public ModelAndView listarTodos(Pageable pageable) {
        LOGGER.debug("Rendering StatusPlans list");
        return new RestModelAndView(estadoPlan(statusPlanService.findAll(pageable)));
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the StatusPlan instance associated with the given id.")
    public StatusPlan getStatusPlan(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting StatusPlan with id: {}", id);
        StatusPlan instance = statusPlanService.findOne(id);
        LOGGER.debug("StatusPlan details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/eliminarEstado", method = RequestMethod.POST)
    @ApiOperation(value = "Deletes the StatusPlan instance associated with the given id.")
    public ModelAndView deleteStatusPlan(@RequestParam("estado_id") Integer id, ModelMap map) {
        LOGGER.debug("Deleting StatusPlan with id: {}", id);
        statusPlanService.delete(id);
        map.put("success", true);
        map.put("success", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/eliminarEstados", method = RequestMethod.POST)
    @ApiOperation(value = "Deletes the StatusPlan instance associated with the given id.")
    public ModelAndView eliminarEstados(@RequestBody JsonId ids, ModelMap map) {
        ArrayList<Integer> integers = ids.getIds();
        for (Integer id : integers) {
            statusPlanService.delete(id);
        }
        map.put("success", true);
        map.put("success", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/cargarDatos", method = RequestMethod.POST)
    @ApiOperation(value = "Updates the StatusPlan instance associated with the given id.")
    public ModelAndView cargarDatos(@RequestParam("estado_id") Integer id, ModelMap map) {
        StatusPlan instance = statusPlanService.findOne(id);
        LOGGER.debug("StatusPlan details with id: {}", instance);
        map.put("success", true);
        map.put("estado", ArregloCreator.crearEstadoPlan(instance));
        return new RestModelAndView(map);
    }

    @RequestMapping(value = "/salvarEstado", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new StatusPlan instance.")
    public ModelAndView createStatusPlan(@RequestBody StatusPlan statusPlan, ModelMap map) {
        LOGGER.debug("Create StatusPlan with information: {}", statusPlan);
        statusPlanService.saveAndFlush(statusPlan);
        map.put("success", true);
        map.put("estado_id", statusPlan.getId());
        map.put("message", "La operación se realizó correctamente");
        LOGGER.debug("Created StatusPlan with information: {}", statusPlan);
        return new RestModelAndView(map);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service
     */
    protected void setStatusPlanService(StatusPlanService service) {
        this.statusPlanService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of StatusPlan instances.")
    public Long countAllStatusPlans() {
        LOGGER.debug("counting StatusPlans");
        Long count = statusPlanService.count();
        return count;
    }

    private ModelMap estadoPlan(Page<StatusPlan> page) {
        ModelMap map = new ModelMap();
        map.put("sEcho", "1");
        map.put("iTotalRecords", page.getTotalElements());
        map.put("iTotalDisplayRecords", page.getNumberOfElements());
        List<StatusPlan> content = page.getContent();
        ModelMap[] tasks = new ModelMap[content.size()];
        int cont = content.size();
        for (int i = 0; i < cont; i++) {
            tasks[i] = ArregloCreator.crearEstadoPlanMap(content.get(i));
        }
        map.put("aaData", tasks);
        return map;
    }

    @ExceptionHandler(Exception.class)
    public ModelAndView tratarExcepcion(Exception e) {
        LOGGER.warn(e.getLocalizedMessage(), e);
        ModelMap modelMap = new ModelMap();
        if (e instanceof JpaSystemException) {
            JpaSystemException jse = (JpaSystemException) e;
            modelMap.put("error", tratarMensaje(jse.getMostSpecificCause()));
        } else if (e instanceof PersistenceException) {
            JpaSystemException exception = new JpaSystemException((PersistenceException) e);
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof DataIntegrityViolationException) {
            DataIntegrityViolationException exception = (DataIntegrityViolationException) e;
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof SQLGrammarException) {
            SQLGrammarException exception = (SQLGrammarException) e;
            modelMap.put("error", tratarMensaje(exception.getCause()));
        } else {
            OracleException oe = new OracleException(e);
            modelMap.put("error", oe.getMessage());
        }
        modelMap.put("success", false);
        return new RestModelAndView(modelMap);
    }

    private String tratarMensaje(Throwable e) {
        String message = e.getMessage();
        if (e.getMessage().contains("unq_facultad_0")) {
            return "Ya existen estas siglas.";
        } else if (e.getMessage().contains("unq_facultad_1")) {
            return "Ya existe este nombre de facultad.";
        } else if (e.getMessage().contains("FK_PLAN_STATUSTASK")) {
            return "No se puede eliminar este estado de plan porque contiene planes.";
        } else if (e.getMessage().contains("fk_departamento_id_facultad")) {
            return "No se puede eliminar esta facultad porque contiene departamentos.";
        }
        OracleException oe = new OracleException(message);
        return oe.getMensaje();
    }

}
