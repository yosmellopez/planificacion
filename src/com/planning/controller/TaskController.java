/*Generado por Disrupsoft*/
package com.planning.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import com.planning.diagram.*;
import com.planning.entity.*;
import com.planning.service.*;
import com.planning.util.*;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import org.hibernate.exception.SQLGrammarException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.orm.jpa.JpaSystemException;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.persistence.PersistenceException;
import javax.servlet.http.Part;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;

@Controller(value = "Planning.TaskController")
@RequestMapping("/tarea")
@Api(description = "Exposes APIs to work with Task resource.", value = "TaskController")
public class TaskController {
    
    private static final Logger LOGGER = LoggerFactory.getLogger(TaskController.class);
    
    @Autowired
    private TaskService taskService;
    
    @Autowired
    private AreaService areaService;
    
    @Autowired
    private PlanService planService;
    
    @Autowired
    private PlTaskService planTareaService;
    
    @Autowired
    private PositionService positionService;
    
    @Autowired
    private CriticalyLevelService levelService;
    
    @Autowired
    private DocumentService documentService;
    
    @Autowired
    private StatusTaskService statusTaskService;
    
    @Autowired
    private ManagementService managementService;
    
    @Autowired
    private ChildTaskService childTaskService;
    
    @Autowired
    private MapeadorObjetos mapeadorObjetos;
    
    private Set<Antecesora> antecesoras;
    
    private Set<Task> sucesoras;
    
    @RequestMapping(value = "/listarTodas", method = {RequestMethod.POST, RequestMethod.GET})
    @ApiOperation(value = "Returns the list of Task instances matching the search criteria.")
    public ModelAndView findTasks(Pageable pageable, ModelMap map) {
        LOGGER.debug("Rendering Tasks list");
        map.put("tareas", taskService.findAll());
        map.put("success", true);
        return RestModelAndView.ok(map);
    }
    
    @RequestMapping(value = "/listarTareas", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Task instances.")
    public ModelAndView getTasks(String fechaInicio, String fechaFin, Boolean filtrar, @AuthenticationPrincipal Users user, Pageable pageable) throws ParseException {
        LOGGER.debug("Rendering Tasks list");
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        if (fechaInicio != null && fechaFin != null && filtrar && !fechaInicio.isEmpty() && !fechaFin.isEmpty()) {
            Date fechaInicial = dateFormat.parse(fechaInicio);
            Date fechaFinal = dateFormat.parse(fechaFin);
            if (user.getRol().getId() == 1) {
                Page<Task> tareas = taskService.findByFechaCreacionBetween(fechaInicial, fechaFinal, pageable);
                return new RestModelAndView(tareas(tareas, user));
            } else {
                Page<Task> tareas = taskService.findByFechaCreacionBetweenAndPosition(fechaInicial, fechaFinal, user.getPosition(), pageable);
                return new RestModelAndView(tareas(tareas, user));
            }
        }
        return new RestModelAndView(tareas(taskService.findAll(pageable), user));
    }
    
    @RequestMapping(value = "/listarTableros", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Task instances.")
    public ModelAndView listarTableros(Integer cargo, Integer area, Integer direccion, Integer criticidad, ModelMap map) {
        List<Task> tasks;
        if (cargo != null) {
            tasks = taskService.findByPosition(positionService.findOne(cargo));
        } else if (area != null) {
            tasks = taskService.findByPosition_Area(areaService.findOne(area));
        } else if (direccion != null) {
            tasks = taskService.findByPosition_Area_Management(managementService.findOne(direccion));
        } else if (criticidad != null) {
            tasks = taskService.findByCriticalyLevelsContains(levelService.findOne(criticidad));
        } else {
            tasks = taskService.findAll();
        }
        MyBoard board = new MyBoard();
        List<StatusTask> statusTasks = statusTaskService.findAll(new Sort(Sort.Direction.ASC, "order"));
        for (StatusTask statusTask : statusTasks) {
            board.addColum(new Column(statusTask.getName(), statusTask.getId(), true, tasks.size(), statusTask.getColor()));
        }
        for (Task task : tasks) {
            board.addDato(new Datos(task.getId(), task.getStatusTask().getId(), task.getStatusTask().getName(), task.getDescription(), task.getStatusTask().getColor(), task.getId()));
            board.addRecurso(new Recurso(task.getId(), task.getPosition().getName(), "", Boolean.FALSE, task.getName(), task.getFechaCreacion()));
        }
        
        map.put("success", true);
        map.put("board", board);
        LOGGER.debug("Rendering Tasks list");
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/buscarTareas", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Task instances.")
    public ModelAndView buscarTareas(Integer cargo, Integer area, Integer direccion, Integer criticidad, @AuthenticationPrincipal Users users, ModelMap map) {
        if (cargo != null) {
            Page<Task> tasks = taskService.findByPosition(positionService.findOne(cargo), new PageRequest(0, Integer.MAX_VALUE));
            return RestModelAndView.ok(tareas(tasks, users));
        } else if (area != null) {
            Page<Task> tasks = taskService.findByPosition_Area(areaService.findOne(area), new PageRequest(0, Integer.MAX_VALUE));
            return RestModelAndView.ok(tareas(tasks, users));
        } else if (direccion != null) {
            Page<Task> tasks = taskService.findByPosition_Area_Management(managementService.findOne(direccion), new PageRequest(0, Integer.MAX_VALUE));
            return RestModelAndView.ok(tareas(tasks, users));
        } else if (criticidad != null) {
            Page<Task> tasks = taskService.findByCriticalyLevelsContains(levelService.findOne(criticidad), new PageRequest(0, Integer.MAX_VALUE));
            return RestModelAndView.ok(tareas(tasks, users));
        } else {
            Page<Task> tasks = taskService.findAll(new PageRequest(0, Integer.MAX_VALUE));
            return RestModelAndView.ok(tareas(tasks, users));
        }
    }
    
    @RequestMapping(value = "/moverTarea/{idTarea}/{idEstado}", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Task instances.")
    public ModelAndView moverTarea(@PathVariable("idTarea") Task task, @PathVariable("idEstado") Integer idEstado, ModelMap map) {
        StatusTask statusTask = statusTaskService.findOne(idEstado);
        task.setStatusTask(statusTask);
        taskService.saveAndFlush(task);
        LOGGER.debug("Rendering Tasks list");
        map.put("success", true);
        map.put("message", "Tarea \"" + task.getName() + "\" movida exitosamente");
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/listarTareasSinTarea/{idTarea}", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Task instances.")
    public ModelAndView listarTareasSinTarea(@PathVariable Integer idTarea, @AuthenticationPrincipal Users user) {
        LOGGER.debug("Rendering Tasks list");
        ModelMap map = new ModelMap();
        map.put("success", true);
        map.put("tareas", taskService.findAll());
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/listarTareasParaImportar", method = {RequestMethod.GET, RequestMethod.POST})
    @ApiOperation(value = "Returns the list of Task instances.")
    public ModelAndView listarTareasParaImportar(@RequestParam Boolean planNuevo, @RequestParam String tareasImportadas, @RequestParam Integer idPlan) {
        ArrayList<Integer> elementos = new ArrayList<>();
        if (!tareasImportadas.isEmpty()) {
            elementos = mapeadorObjetos.readValue(tareasImportadas, ArrayList.class);
        }
        LOGGER.debug("Rendering Tasks list");
        List<Task> taskList;
        if (planNuevo && elementos.isEmpty()) {
            taskList = taskService.findAll();
        } else if (planNuevo) {
            taskList = taskService.findByIdNotIn(elementos);
        } else {
            Plan plan = planService.findOne(idPlan);
            if (plan.getPlTasks().isEmpty()) {
                taskList = taskService.findAll();
            } else {
                List<PlTask> plTaskList = planTareaService.findByPlan(plan);
                List<Integer> ids = new ArrayList<>();
                plTaskList.forEach((PlTask planTarea) -> {
                    ids.add(planTarea.getTask().getId());
                });
                taskList = taskService.findByIdNotIn(ids);
            }
        }
        return new RestModelAndView(tareasImportar(taskList));
    }
    
    @RequestMapping(value = "/cargarDatos", method = {RequestMethod.POST})
    @ApiOperation(value = "Returns the Task instance associated with the given id.")
    public ModelAndView cargarDatos(@RequestParam("tarea_id") Integer id, @RequestParam("plan_id") Integer idPlan, ModelMap map) {
        LOGGER.debug("Getting Task with id: {}", id);
        Task t = taskService.findOne(id);
        if (idPlan != 0) {
            Plan plan = planService.findOne(idPlan);
            PlTask plTask = planTareaService.findByPlanAndTask(plan, t);
            List<ChildTask> childTaskSucesoras = childTaskService.findByFromAndIsChild(plTask, true);
            for (ChildTask child : childTaskSucesoras) {
                t.getRelacionadas().add(new Tarea(child.getTo()));
            }
            
            antecesoras = new HashSet<>();
            sucesoras = new HashSet<>();
            List<ChildTask> childTasksAntecesoras = childTaskService.findByToAndIsChild(plTask, true);
            childTaskSucesoras.forEach((ChildTask hijo) -> {
                sucesoras.add(hijo.getTo().getTask());
            });
            for (ChildTask childTask : childTasksAntecesoras) {
                Antecesora antecesora = new Antecesora(childTask.getFrom());
                if (!existeAntecesora(antecesora))
                    antecesoras.add(antecesora);
            }
            map.put("antecesoras", antecesoras);
            map.put("sucesoras", sucesoras);
        }
        List<Area> areas = areaService.findByManagementId(t.getPosition().getArea().getManagement().getId());
        List<Position> positions = positionService.findByAreaId(t.getPosition().getArea().getId());
        List<Document> documents = documentService.findByTaskId(id);
        map.put("success", true);
        map.put("tarea", ArregloCreator.cargarTarea(t, areas, positions, documents, false));
        LOGGER.debug("Task details with id: {}", t);
        return new RestModelAndView(map);
    }
    
    private boolean existeAntecesora(Antecesora antecesora) {
        if (antecesoras.isEmpty())
            return false;
        for (Antecesora ant : antecesoras) {
            if (ant.getId().equals(antecesora.getId()))
                return true;
        }
        return false;
    }
//
//    private void buscarAntecesorasRecursivo(PlTask to) {
//        antecesoras.add(new Antecesora(to));
//        List<ChildTask> childTasks = childTaskService.findByToAndIsChild(to, true);
//        if (childTasks.isEmpty()) {
//            return;
//        }
//        for (ChildTask childTask : childTasks) {
//            buscarAntecesorasRecursivo(childTask.getFrom());
//        }
//    }
    
    @RequestMapping(value = "/cargarDatos", method = RequestMethod.PUT)
    @ApiOperation(value = "Returns the Task instance associated with the given id.")
    public ModelAndView cargarDatosPlan(@RequestBody PlanTarea planTarea, ModelMap map) {
        Task t = taskService.findOne(planTarea.getTareaId());
        Position position = t.getPosition();
        PlTask plTask = null;
        if (planTarea.getPlanId() != null) {
            Plan plan = planService.findOne(planTarea.getPlanId());
            plTask = planTareaService.findByPlanAndTask(plan, taskService.findOne(planTarea.getTareaId()));
            if (plTask == null) {
                plTask = new PlTask();
            }
            plTask.setName(t.getName());
            plTask.setPlan(plan);
            plTask.setTask(taskService.findOne(planTarea.getTareaId()));
            plTask.setStart(t.isStart());
            planTareaService.saveAndFlush(plTask);
            List<Area> areas = areaService.findByManagementId(position.getArea().getManagement().getId());
            List<Position> positions = positionService.findByAreaId(position.getArea().getId());
            List<Document> documents = documentService.findByTaskId(planTarea.getTareaId());
            planTareaService.saveAndFlush(plTask);
            if (plan.getDiagrama() != null && !plan.getDiagrama().isEmpty()) {
                Modelo modelo = mapeadorObjetos.readValue(plan.getDiagrama(), Modelo.class);
                if (modelo != null) {
                    modelo.addNode(new Node(plTask));
                    if (modelo.isModificado()) {
                        plan.setDiagrama(mapeadorObjetos.writeValueAsString(modelo));
                        planService.saveAndFlush(plan);
                    }
                }
                
            }
            map.put("tarea", ArregloCreator.cargarTarea(plTask, areas, positions, documents));
        }
        map.put("success", true);
        LOGGER.debug("Task details with id: {}", t);
        return new RestModelAndView(map);
    }
    
    
    private void buscarAntecesorasRecursivo(PlTask to, ArrayList<Antecesora> antecesoras) {
        antecesoras.add(new Antecesora(to));
        List<ChildTask> childTasks = childTaskService.findByToAndIsChild(to, true);
        if (childTasks.isEmpty()) {
            return;
        }
        for (ChildTask childTask : childTasks) {
            buscarAntecesorasRecursivo(childTask.getFrom(), antecesoras);
        }
    }
    
    @RequestMapping(value = "/cargarDatos/{idTarea}", method = RequestMethod.PUT)
    @ApiOperation(value = "Returns the Task instance associated with the given id.")
    public ModelAndView cargarDatosTarea(@RequestBody PlanTarea planTarea, ModelMap map) {
        Task t = taskService.findOne(planTarea.getTareaId());
        Position position = t.getPosition();
        PlTaskUtil plTask = new PlTaskUtil();
        plTask.setName(t.getName());
        plTask.setTask(taskService.findOne(planTarea.getTareaId()));
        plTask.setPosition(position);
        plTask.setCargo(position.getName());
        plTask.setChannel(t.getChannel());
        plTask.setCriticalyLevels(t.getCriticalyLevels());
        plTask.setCriticidad(t.getCriticidad());
        plTask.setGerencia(t.getGerencia());
        plTask.setHeight(0);
        plTask.setIsrecurrent(t.isIsrecurrent());
        plTask.setPartida(t.isStart());
        plTask.setPosx(0);
        plTask.setPosy(0);
        plTask.setStatusTask(t.getStatusTask());
        plTask.setWidth(0);
        List<Area> areas = areaService.findByManagementId(position.getArea().getManagement().getId());
        List<Position> positions = positionService.findByAreaId(position.getArea().getId());
        List<Document> documents = documentService.findByTaskId(planTarea.getTareaId());
        map.put("tarea", ArregloCreator.cargarTareaFicticia(plTask, areas, positions, documents));
        map.put("success", true);
        LOGGER.debug("Task details with id: {}", t);
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/eliminarTarea", method = RequestMethod.POST)
    @ApiOperation(value = "Deletes the Task instance associated with the given id.")
    public ModelAndView eliminarTarea(@RequestParam("tarea_id") Integer id, ModelMap map) {
        LOGGER.debug("Deleting Task with id: {}", id);
        taskService.delete(id);
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/eliminarTareas", method = RequestMethod.POST)
    @ApiOperation(value = "Deletes the Task instance associated with the given id.")
    public ModelAndView eliminarTareas(@RequestBody JsonId ids, ModelMap map) {
        ArrayList<Integer> integers = ids.getIds();
        for (Integer id : integers) {
            taskService.delete(id);
        }
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/eliminarModelo", method = RequestMethod.POST)
    @ApiOperation(value = "Deletes the Task instance associated with the given ids.")
    public ModelAndView eliminarModelo(@RequestParam("modelo_id") Integer id, ModelMap map) {
        Document document = documentService.findOne(id);
        documentService.delete(document);
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/salvarTarea", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Task instance.")
    public ModelAndView salvarTarea(@RequestBody Task tarea, @RequestParam("plan") Boolean isPlan, Integer planId, ModelMap map) {
        LOGGER.debug("Create Task with information: {}", tarea);
        List<Tarea> relacionadas = tarea.getRelacionadas();
        if (tarea.getId() != null) {
            Task task = taskService.findOne(tarea.getId());
            task.clonarDatos(tarea);
            Set<CriticalyLevel> levels = new LinkedHashSet<>();
            for (CriticalyLevel criticalyLevel : tarea.getCriticalyLevels()) {
                levels.add(levelService.findOne(criticalyLevel.getId()));
            }
            task.setCriticalyLevels(levels);
            taskService.saveAndFlush(task);
            tarea = task;
        } else {
            Set<CriticalyLevel> levels = new LinkedHashSet<>();
            for (CriticalyLevel criticalyLevel : tarea.getCriticalyLevels()) {
                levels.add(levelService.findOne(criticalyLevel.getId()));
            }
            tarea.setCriticalyLevels(new HashSet<>());
            tarea = taskService.saveAndFlush(tarea);
            tarea.setCriticalyLevels(levels);
            taskService.saveAndFlush(tarea);
        }
        Set<Document> documents = tarea.getDocuments();
        if (!documents.isEmpty()) {
            for (Document document : documents) {
                if (document.getTask() == null) {
                    document.setTask(tarea);
                    document.setUltimo(false);
                    documentService.saveAndFlush(document);
                }
            }
        }
        if (isPlan) {
            Plan plan = planService.findOne(planId);
            Modelo modelo = null;
            boolean insertado = false;
            if (plan.getDiagrama() != null && !plan.getDiagrama().isEmpty()) {
                modelo = mapeadorObjetos.readValue(plan.getDiagrama(), Modelo.class);
            }
            PlTask elemento = planTareaService.findByPlanAndTask(plan, tarea);
            elemento.setStart(tarea.isStart());
            planTareaService.saveAndFlush(elemento);
            List<ChildTask> childs = childTaskService.findByFromAndIsChild(elemento, true);
            if (relacionadas.size() < childs.size()) {
                for (ChildTask child : childs) {
                    childTaskService.deleteById(child.getId());
                }
            }
            ArrayList<String> errores = new ArrayList<>();
            for (Tarea tareaRelacionada : relacionadas) {
                PlTask plTask = new PlTask();
                plTask.setPlan(plan);
                Task task = taskService.findOne(tareaRelacionada.getId());
                plTask.setTask(task);
                plTask.getTask().setStatusTask(tareaRelacionada.getStatusTask());
                plTask.setIsrecurrent(tareaRelacionada.isIsrecurrent());
                plTask.setStart(tareaRelacionada.isStart());
                plTask.getTask().setChannel(tareaRelacionada.getChannel());
                plTask.setName(tareaRelacionada.getName());
                plTask.getTask().setPosition(tareaRelacionada.getPosition());
                try {
                    planTareaService.saveAndFlush(plTask);
                } catch (Exception e) {
                    plTask = planTareaService.findByPlanAndTask(plan, task);
                }
                ChildTask childTask = new ChildTask();
                PlTask planTarea = planTareaService.findByPlanAndTask(plan, tarea);
                childTask.setFrom(planTarea);
                childTask.setTo(plTask);
                childTask.setIsChild(true);
                if (modelo != null) {
                    modelo.addEdge(new Edge("" + childTask.getFrom().getTask().getId(), "" + childTask.getTo().getTask().getId()));
                    modelo.addNode(new Node(plTask));
                }
                try {
                    if (!planTarea.getId().equals(plTask.getId()) && childTask.isValid()) {
                        childTaskService.saveAndFlush(childTask);
                        insertado = true;
                    }
                } catch (Exception e) {
                    LOGGER.debug("Ya existe la relacion: {}", childTask);
                    errores.add("<li>" + tratarMensaje(e) + "</li>");
                }
            }
            if (modelo != null && modelo.isModificado() && insertado) {
                plan.setDiagrama(mapeadorObjetos.writeValueAsString(modelo));
                planService.saveAndFlush(plan);
            }
        }
        tarea = taskService.findOne(tarea.getId());
        LOGGER.debug("Created Task with information: {}", tarea);
        map.put("success", true);
        map.put("message", "La operación se realizó correctamente");
        map.put("tarea", tarea);
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/salvarModelo", method = RequestMethod.POST)
    public ModelAndView insertarArchivo(@RequestPart Part file, @RequestParam String nombre, @RequestParam String descripcion, @RequestParam Boolean radioestado, @RequestParam Integer tareaId) throws IOException {
        ModelMap map = new ModelMap();
        try (BufferedInputStream bis = new BufferedInputStream(file.getInputStream())) {
            byte[] bs = new byte[(int) file.getSize()];
            String nombreArchivo = file.getSubmittedFileName();
            file.write(nombreArchivo);
            bis.read(bs);
            Document document = new Document(nombre, nombreArchivo, true, radioestado != null ? radioestado : false);
            if (tareaId != 0) {
                Task task = taskService.findOne(tareaId);
                document.setTask(task);
            }
            document.setUltimo(true);
            documentService.saveAndFlush(document);
            map.put("success", true);
            map.put("modelo", document);
        }
        return new RestModelAndView(map);
    }
    
    @RequestMapping(value = "/salvarModeloTarea", method = RequestMethod.POST)
    public ModelAndView guardarArchivo(@RequestPart Part file, @RequestParam String nombre, @RequestParam String descripcion, @RequestParam Integer tareaId, @RequestParam Integer documentId) throws IOException {
        ModelMap map = new ModelMap();
        try (BufferedInputStream bis = new BufferedInputStream(file.getInputStream())) {
            byte[] bs = new byte[(int) file.getSize()];
            String nombreArchivo = file.getSubmittedFileName();
            file.write(nombreArchivo);
            bis.read(bs);
            Document document = documentService.findOne(documentId);
            Task task = taskService.findOne(tareaId);
            document.setName(nombre);
            document.setDocpath(nombreArchivo);
            document.setDescription(descripcion);
            document.setTask(task);
            documentService.saveAndFlush(document);
            map.put("success", true);
            map.put("modelo", document);
        }
        return new RestModelAndView(map);
    }
    
    private ModelMap tareas(Page<Task> page, Users usuario) {
        ModelMap map = new ModelMap();
        map.put("sEcho", page.getNumber());
        map.put("iTotalRecords", page.getTotalElements());
        map.put("iTotalDisplayRecords", page.getNumberOfElements());
        List<Task> content = page.getContent();
        ModelMap[] tasks = new ModelMap[content.size()];
        int cont = content.size();
        for (int i = 0; i < cont; i++) {
            tasks[i] = ArregloCreator.crearTareaMap(content.get(i), usuario);
        }
        map.put("aaData", tasks);
        return map;
    }
    
    private Map<String, ?> tareasImportar(List<Task> tasks) {
        ModelMap map = new ModelMap();
        map.put("sEcho", "1");
        map.put("iTotalRecords", tasks.size());
        map.put("iTotalDisplayRecords", tasks.size());
        ModelMap[] modelMaps = new ModelMap[tasks.size()];
        int cont = tasks.size();
        for (int i = 0; i < cont; i++) {
            modelMaps[i] = ArregloCreator.crearTareaImportarMap(tasks.get(i), i + 1);
        }
        map.put("aaData", modelMaps);
        return map;
    }
    
    @ExceptionHandler(Exception.class)
    public ModelAndView tratarExcepcion(Exception e) {
        e.printStackTrace();
        LOGGER.warn(e.getLocalizedMessage(), e);
        ModelMap modelMap = new ModelMap();
        if (e instanceof JpaSystemException) {
            JpaSystemException jse = (JpaSystemException) e;
            modelMap.put("error", tratarMensaje(jse.getMostSpecificCause()));
        } else if (e instanceof PersistenceException) {
            JpaSystemException exception = new JpaSystemException((PersistenceException) e);
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof DataIntegrityViolationException) {
            DataIntegrityViolationException exception = (DataIntegrityViolationException) e;
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof SQLGrammarException) {
            SQLGrammarException exception = (SQLGrammarException) e;
            modelMap.put("error", tratarMensaje(exception.getCause()));
        } else {
            OracleException oe = new OracleException(e);
            modelMap.put("error", oe.getMessage());
        }
        modelMap.put("success", false);
        return new RestModelAndView(modelMap);
    }
    
    private String tratarMensaje(Throwable e) {
        String message = e.getMessage();
        if (e.getMessage().contains("unq_facultad_0")) {
            return "Ya existen estas siglas.";
        } else if (e.getMessage().contains("SYS_C009972")) {
            return "La secuencia no está correctamente configurada para esta entidad.";
        } else if (e.getMessage().contains("FK_DOCUMENT_TASK")) {
            return "No se puede eliminar esta tarea porque contiene documentos.";
        } else if (e.getMessage().contains("FK_TASK_LEVEL")) {
            return "No se puede eliminar esta tarea porque está referenciada en los estados de alerta.";
        } else if (e.getMessage().contains("UNIQUE_FROM_TO")) {
            return "No se puede insertar este vínculo porque ya existe.";
        } else if (e.getMessage().contains("fk_departamento_id_facultad")) {
            return "No se puede eliminar esta facultad porque contiene departamentos.";
        }
        OracleException oe = new OracleException(message);
        return oe.getMensaje();
    }
}
