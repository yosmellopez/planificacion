/*Generado por Disrupsoft*/
package com.planning.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.planning.entity.ChildTask;
import com.planning.service.ChildTaskService;
import com.planning.util.OracleException;
import com.planning.util.RestModelAndView;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import org.hibernate.exception.SQLGrammarException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.orm.jpa.JpaSystemException;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import javax.persistence.PersistenceException;

/**
 * Controller object for domain model class ChildTask.
 *
 * @see ChildTask
 */
@RestController(value = "Planning.ChildTaskController")
@RequestMapping("/planning/ChildTask")
@Api(description = "Exposes APIs to work with ChildTask resource.", value = "ChildTaskController")
public class ChildTaskController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChildTaskController.class);

    @Autowired
    private ChildTaskService childTaskService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ChildTask instances matching the search criteria.")
    public Page<ChildTask> findChildTasks(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ChildTasks list");
        return childTaskService.findAll(pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ChildTask instances.")
    public Page<ChildTask> getChildTasks(Pageable pageable) {
        LOGGER.debug("Rendering ChildTasks list");
        return childTaskService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ChildTask instance associated with the given id.")
    public ChildTask getChildTask(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ChildTask with id: {}", id);
        ChildTask instance = childTaskService.findOne(id);
        LOGGER.debug("ChildTask details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ChildTask instance associated with the given id.")
    public boolean deleteChildTask(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ChildTask with id: {}", id);
        childTaskService.delete(id);
        return true;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ChildTask instance associated with the given id.")
    public ChildTask editChildTask(@PathVariable("id") Integer id, @RequestBody ChildTask instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ChildTask with id: {}", instance.getId());
        instance.setId(id);
        instance = childTaskService.saveAndFlush(instance);
        LOGGER.debug("ChildTask details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new ChildTask instance.")
    public ChildTask createChildTask(@RequestBody ChildTask instance) {
        LOGGER.debug("Create ChildTask with information: {}", instance);
        instance = childTaskService.saveAndFlush(instance);
        LOGGER.debug("Created ChildTask with information: {}", instance);
        return instance;
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service
     */
    protected void setChildTaskService(ChildTaskService service) {
        this.childTaskService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ChildTask instances.")
    public Long countAllChildTasks() {
        LOGGER.debug("counting ChildTasks");
        Long count = childTaskService.count();
        return count;
    }

    @ExceptionHandler(Exception.class)
    public ModelAndView tratarExcepcion(Exception e) {
        LOGGER.warn(e.getLocalizedMessage(), e);
        ModelMap modelMap = new ModelMap();
        if (e instanceof JpaSystemException) {
            JpaSystemException jse = (JpaSystemException) e;
            modelMap.put("error", tratarMensaje(jse.getMostSpecificCause()));
        } else if (e instanceof PersistenceException) {
            JpaSystemException exception = new JpaSystemException((PersistenceException) e);
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof DataIntegrityViolationException) {
            DataIntegrityViolationException exception = (DataIntegrityViolationException) e;
            modelMap.put("error", tratarMensaje(exception.getMostSpecificCause()));
        } else if (e instanceof SQLGrammarException) {
            SQLGrammarException exception = (SQLGrammarException) e;
            modelMap.put("error", tratarMensaje(exception.getCause()));
        } else {
            OracleException oe = new OracleException(e);
            modelMap.put("error", oe.getMessage());
        }
        modelMap.put("success", false);
        return new RestModelAndView(modelMap);
    }

    private String tratarMensaje(Throwable e) {
        String message = e.getMessage();
        if (e.getMessage().contains("unq_facultad_0")) {
            return "Ya existen estas siglas.";
        } else if (e.getMessage().contains("unq_facultad_1")) {
            return "Ya existe este nombre de facultad.";
        } else if (e.getMessage().contains("fk_departamento_id_facultad")) {
            return "No se puede eliminar esta facultad porque contiene departamentos.";
        }
        OracleException oe = new OracleException(message);
        return oe.getMensaje();
    }

}
